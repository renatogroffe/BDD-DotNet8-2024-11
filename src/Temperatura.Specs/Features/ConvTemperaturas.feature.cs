// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Temperatura.Specs.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ConversaoDeTemperaturasEmFahrenheitFeature : object, Xunit.IClassFixture<ConversaoDeTemperaturasEmFahrenheitFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ConvTemperaturas.feature"
#line hidden
        
        public ConversaoDeTemperaturasEmFahrenheitFeature(ConversaoDeTemperaturasEmFahrenheitFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly();
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Features", "Conversao de temperaturas em Fahrenheit", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
            testRunner = null;
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="SimulacaoTemperatura01")]
        [Xunit.TraitAttribute("FeatureTitle", "Conversao de temperaturas em Fahrenheit")]
        [Xunit.TraitAttribute("Description", "SimulacaoTemperatura01")]
        public async System.Threading.Tasks.Task SimulacaoTemperatura01()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("SimulacaoTemperatura01", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
 await testRunner.GivenAsync("que o valor da temperatura e de 32 graus Fahrenheit", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
#line 6
 await testRunner.WhenAsync("eu solicitar a conversao desta teperatura", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 7
 await testRunner.ThenAsync("o resultado da conversao para Celsius sera de 0 graus", ((string)(null)), ((global::Reqnroll.Table)(null)), "Entao ");
#line hidden
#line 8
 await testRunner.AndAsync("o resultado da conversao para Kelvin sera de 273,15 graus", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="SimulacaoTemperatura02")]
        [Xunit.TraitAttribute("FeatureTitle", "Conversao de temperaturas em Fahrenheit")]
        [Xunit.TraitAttribute("Description", "SimulacaoTemperatura02")]
        public async System.Threading.Tasks.Task SimulacaoTemperatura02()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("SimulacaoTemperatura02", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 11
 await testRunner.GivenAsync("que o valor da temperatura e de 86 graus Fahrenheit", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
#line 12
 await testRunner.WhenAsync("eu solicitar a conversao desta teperatura", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 13
 await testRunner.ThenAsync("o resultado da conversao para Celsius sera de 30 graus", ((string)(null)), ((global::Reqnroll.Table)(null)), "Entao ");
#line hidden
#line 14
 await testRunner.AndAsync("o resultado da conversao para Kelvin sera de 303,15 graus", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="SimulacaoTemperatura03")]
        [Xunit.TraitAttribute("FeatureTitle", "Conversao de temperaturas em Fahrenheit")]
        [Xunit.TraitAttribute("Description", "SimulacaoTemperatura03")]
        public async System.Threading.Tasks.Task SimulacaoTemperatura03()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("SimulacaoTemperatura03", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 17
 await testRunner.GivenAsync("que o valor da temperatura e de 47 graus Fahrenheit", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
#line 18
 await testRunner.WhenAsync("eu solicitar a conversao desta teperatura", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 19
 await testRunner.ThenAsync("o resultado da conversao para Celsius sera de 8,33 graus", ((string)(null)), ((global::Reqnroll.Table)(null)), "Entao ");
#line hidden
#line 20
 await testRunner.AndAsync("o resultado da conversao para Kelvin sera de 281,48 graus", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="SimulacaoTemperatura04")]
        [Xunit.TraitAttribute("FeatureTitle", "Conversao de temperaturas em Fahrenheit")]
        [Xunit.TraitAttribute("Description", "SimulacaoTemperatura04")]
        public async System.Threading.Tasks.Task SimulacaoTemperatura04()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("SimulacaoTemperatura04", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 23
 await testRunner.GivenAsync("que o valor da temperatura e de 90,5 graus Fahrenheit", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
#line 24
 await testRunner.WhenAsync("eu solicitar a conversao desta teperatura", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 25
 await testRunner.ThenAsync("o resultado da conversao para Celsius sera de 32,5 graus", ((string)(null)), ((global::Reqnroll.Table)(null)), "Entao ");
#line hidden
#line 26
 await testRunner.AndAsync("o resultado da conversao para Kelvin sera de 305,65 graus", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="SimulacaoTemperatura05")]
        [Xunit.TraitAttribute("FeatureTitle", "Conversao de temperaturas em Fahrenheit")]
        [Xunit.TraitAttribute("Description", "SimulacaoTemperatura05")]
        public async System.Threading.Tasks.Task SimulacaoTemperatura05()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("SimulacaoTemperatura05", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 29
 await testRunner.GivenAsync("que o valor da temperatura e de 120,18 graus Fahrenheit", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
#line 30
 await testRunner.WhenAsync("eu solicitar a conversao desta teperatura", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 31
 await testRunner.ThenAsync("o resultado da conversao para Celsius sera de 48,99 graus", ((string)(null)), ((global::Reqnroll.Table)(null)), "Entao ");
#line hidden
#line 32
 await testRunner.AndAsync("o resultado da conversao para Kelvin sera de 322,14 graus", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="SimulacaoTemperatura06")]
        [Xunit.TraitAttribute("FeatureTitle", "Conversao de temperaturas em Fahrenheit")]
        [Xunit.TraitAttribute("Description", "SimulacaoTemperatura06")]
        public async System.Threading.Tasks.Task SimulacaoTemperatura06()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("SimulacaoTemperatura06", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 35
 await testRunner.GivenAsync("que o valor da temperatura e de 212 graus Fahrenheit", ((string)(null)), ((global::Reqnroll.Table)(null)), "Dado ");
#line hidden
#line 36
 await testRunner.WhenAsync("eu solicitar a conversao desta teperatura", ((string)(null)), ((global::Reqnroll.Table)(null)), "Quando ");
#line hidden
#line 37
 await testRunner.ThenAsync("o resultado da conversao para Celsius sera de 100 graus", ((string)(null)), ((global::Reqnroll.Table)(null)), "Entao ");
#line hidden
#line 38
 await testRunner.AndAsync("o resultado da conversao para Kelvin sera de 373,15 graus", ((string)(null)), ((global::Reqnroll.Table)(null)), "E ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ConversaoDeTemperaturasEmFahrenheitFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ConversaoDeTemperaturasEmFahrenheitFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
